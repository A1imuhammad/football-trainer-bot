package handlers

import (
	data "botik/internal/data"
	feature "botik/internal/servises"
	"botik/keyboards"
	"botik/models"
	"encoding/json"
	"os"
	"strings"

	"fmt"
	"log"
	"math/rand"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func handleStart(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	log.Printf("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –æ—Ç: %d", update.Message.Chat.ID)
	feature.AddUser(update.Message.Chat.ID)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, `–ü—Ä–∏–≤–µ—Ç, —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π —Ñ–∞–Ω–∞—Ç! ‚öΩ

–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ –Ω–∞ –ø–æ–ª–µ! üåü
–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤, —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–∫—Ç–∏–∫–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —Ñ—É—Ç–±–æ–ª–µ. üéâ

–Ø –ø—Ä–µ–¥–ª–æ–∂—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –¥–∞–º —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –≤ –∏–≥—Ä–µ. üí™
–ê –µ—â—ë –ø–æ–¥–µ–ª—é—Å—å –∫—Ä—É—Ç—ã–º–∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏ –∏–∑ –º–∏—Ä–∞ —Ñ—É—Ç–±–æ–ª–∞, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üöÄ

–¢—ã —Å–º–æ–∂–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ. üå±
–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî —Ñ—É—Ç–±–æ–ª –∂–¥—ë—Ç! ‚ö°`)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ß—Ç–æ —è —É–º–µ—é", "function_commands")),
	)

	msg.ReplyMarkup = keyboard

	if _, err := bot.Send(msg); err != nil {
		log.Println(err)
	}
}

func handleGeneralCommands(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	switch update.CallbackQuery.Data {
	case "tactic":
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, `–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?`)
		msg.ReplyMarkup = keyboards.TacticKeyboard
		bot.Send(msg)

	case "fact":
		facts, err := data.Facts()
		if err != nil {
			log.Println(err)
			return
		}
		reply := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–î–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–π", "fact"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "function_commands"),
			),
		)
		edit := tgbotapi.NewEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.ID,
			update.CallbackQuery.Message.MessageID,
			facts[rand.Intn(len(facts))].Fact,
			reply,
		)
		bot.Send(edit)

	case "drill":
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, `–î–ª—è –∫–∞–∫–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?`)
		msg.ReplyMarkup = keyboards.DrillKeyboard
		bot.Send(msg)
	case "progress":
		userID := update.CallbackQuery.From.ID
		report := getProgressText(int64(userID))
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, report)
		bot.Send(msg)
	}

}

func handleGeneralCommands2(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	switch update.Message.Command() {
	case "tactic":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, `–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?`)
		msg.ReplyMarkup = keyboards.TacticKeyboard
		bot.Send(msg)

	case "fact":
		facts, err := data.Facts()
		if err != nil {
			log.Println(err)
			return
		}
		reply := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–î–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–π", "fact"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "function_commands"),
			),
		)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, facts[rand.Intn(len(facts))].Fact)
		msg.ReplyMarkup = reply
		bot.Send(msg)

	case "drill":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, `–î–ª—è –∫–∞–∫–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?`)
		msg.ReplyMarkup = keyboards.DrillKeyboard
		bot.Send(msg)
	case "progress":
		userID := update.Message.From.ID
		report := getProgressText(int64(userID))
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, report)
		bot.Send(msg)
	}
}

func handleTacticCommands(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	tactics, err := data.Tactics()
	if err != nil {
		log.Println(err)
		return
	}

	switch update.CallbackQuery.Data {
	case "attack":
		reply := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–î–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–π", "attack"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "tactic"),
			),
		)
		edit := tgbotapi.NewEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.ID,
			update.CallbackQuery.Message.MessageID,
			tactics.Tactics.Attack[rand.Intn(len(tactics.Tactics.Attack))],
			reply,
		)
		bot.Send(edit)

	case "defense":
		reply := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–î–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–π", "defense"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "tactic"),
			),
		)
		edit := tgbotapi.NewEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.ID,
			update.CallbackQuery.Message.MessageID,
			tactics.Tactics.Defense[rand.Intn(len(tactics.Tactics.Defense))],
			reply,
		)
		bot.Send(edit)

	case "position":
		reply := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–î–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–π", "position"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "tactic"),
			),
		)
		edit := tgbotapi.NewEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.ID,
			update.CallbackQuery.Message.MessageID,
			tactics.Tactics.Positioning[rand.Intn(len(tactics.Tactics.Positioning))],
			reply,
		)
		bot.Send(edit)

	}
}

func handleDrillCommands(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	switch update.CallbackQuery.Data {
	case "attacker":
		edit := tgbotapi.NewEditMessageTextAndMarkup(
			update.CallbackQuery.Message.Chat.ID,
			update.CallbackQuery.Message.MessageID,
			`–î–ª—è –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?`,
			keyboards.ForAttackerKeyboard,
		)
		bot.Send(edit)
	case "defend":
		edit := tgbotapi.NewEditMessageTextAndMarkup(
			update.CallbackQuery.Message.Chat.ID,
			update.CallbackQuery.Message.MessageID,
			`–î–ª—è –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?`,
			keyboards.ForDefendceKeyboard,
		)
		bot.Send(edit)
	}
}

const progressFile = "user_progress.json"

var userProgress = make(map[int64]map[string]int)

func handleTrainingCommands(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	att, def, err := data.Training()
	if err != nil {
		log.Println(err)
		return
	}

	exerciseMap := map[string][]models.Exercise{
		"general":              att.General,
		"forward":              att.Forward,
		"winger":               att.Winger,
		"attackingMidfielder":  att.AttackingMidfielder,
		"centralMidfielder":    att.CentralMidfielder,
		"defensiveMidfielder":  att.DefensiveMidfielder,
		"laterale":             att.Laterale,
		"defender":             att.Defender,
		"goalkeeper":           att.Goalkeeper,
		"general2":             def.General,
		"forward2":             def.Forward,
		"attackingMidfielder2": def.AttackingMidfielder,
		"centralMidfielder2":   def.CentralMidfielder,
		"defensiveMidfielder2": def.DefensiveMidfielder,
		"laterale2":            def.Laterale,
		"defender2":            def.Defender,
		"goalkeeper2":          def.Goalkeeper,
	}
	if strings.HasPrefix(update.CallbackQuery.Data, "done_") {
		positionKey := strings.TrimPrefix(update.CallbackQuery.Data, "done_")
		positionKey = strings.TrimSuffix(positionKey, "2") // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
		if userProgress[int64(update.CallbackQuery.From.ID)] == nil {
			userProgress[int64(update.CallbackQuery.From.ID)] = make(map[string]int)
		}
		userProgress[int64(update.CallbackQuery.From.ID)][positionKey]++

		if err := saveProgress(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: %v", err)
		}

		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
		bot.Send(msg)
		return
	}
	if exercises, ok := exerciseMap[update.CallbackQuery.Data]; ok {
		if len(exercises) == 0 {
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
			bot.Send(msg)
			return
		}

		var backCallback string
		if strings.Contains(update.CallbackQuery.Data, "2") {
			backCallback = "defend"
		} else {
			backCallback = "attacker"
		}

		reply := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ–í—ã–ø–æ–ª–Ω–µ–Ω–æ", "done_"+update.CallbackQuery.Data),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–î–∞–≤–∞–π –¥—Ä—É–≥–æ–µ", update.CallbackQuery.Data),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", backCallback),
			),
		)

		ex := exercises[rand.Intn(len(exercises))]
		text := fmt.Sprintf("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–§–æ–∫—É—Å: %s", ex.Name, ex.Description, ex.Focus)
		edit := tgbotapi.NewEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.ID,
			update.CallbackQuery.Message.MessageID,
			text,
			reply,
		)
		bot.Send(edit)
	} else {
		log.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:", update.CallbackQuery.Data)
	}
}

func getProgressText(userID int64) string {
	stats, ok := userProgress[userID]
	if !ok || len(stats) == 0 {
		return `üòî –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –Ω–æ —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –Ω–∞—á–∞—Ç—å! 
‚öΩ –í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!`
	}

	positionTranslations := map[string]string{
		"general":             "–û–±—â–∏–µ",
		"forward":             "–ù–∞–ø–∞–¥–∞—é—â–∏–π",
		"winger":              "–í–∏–Ω–≥–µ—Ä",
		"attackingMidfielder": "–ê—Ç–∞–∫—É—é—â–∏–π –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫",
		"centralMidfielder":   "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫",
		"defensiveMidfielder": "–û–ø–æ—Ä–Ω—ã–π –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫",
		"laterale":            "–§–ª–∞–Ω–≥–æ–≤—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫",
		"defender":            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫",
		"goalkeeper":          "–í—Ä–∞—Ç–∞—Ä—å",
	}

	totalExercises := 0
	for _, count := range stats {
		totalExercises += count
	}
	var sb strings.Builder
	sb.WriteString("üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:\n\n")
	for position, count := range stats {
		// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ
		positionName := positionTranslations[position]
		if positionName == "" {
			positionName = position // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
		}
		sb.WriteString(fmt.Sprintf("- %s: %d —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n", positionName, count))
	}
	sb.WriteString(fmt.Sprintf("\nüî• –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: %d %s\n", totalExercises, getExerciseWord(totalExercises)))
	return sb.String()
}

func getExerciseWord(count int) string {
	if count%10 == 1 && count%100 != 11 {
		return "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
	} else if count%10 >= 2 && count%10 <= 4 && (count%100 < 10 || count%100 > 20) {
		return "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
	}
	return "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"
}

func loadProgress() error {
	data, err := os.ReadFile(progressFile)
	if err != nil {
		if os.IsNotExist(err) {
			log.Println("–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π")
			return nil
		}
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", progressFile, err)
	}

	if err := json.Unmarshal(data, &userProgress); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}
	log.Println("–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑", progressFile)
	return nil
}

func saveProgress() error {
	data, err := json.MarshalIndent(userProgress, "", "  ")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	if err := os.WriteFile(progressFile, data, 0644); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª %s: %v", progressFile, err)
	}
	log.Println("–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤", progressFile)
	return nil
}

func handleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {

	if update.CallbackQuery != nil {
		bot.Send(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))

		if update.CallbackQuery.Data == "function_commands" {
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID,
				`–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ –Ω–∞ –ø–æ–ª–µ —Å –ø–æ–º–æ—â—å—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
–ê –µ—â—ë —è –±—É–¥—É –¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏–∑ –º–∏—Ä–∞ —Ñ—É—Ç–±–æ–ª–∞! üìö`,
			)

			msg.ReplyMarkup = keyboards.FunctionalKeyboard
			bot.Send(msg)
		}
		handleTrainingCommands(bot, update)
		handleTacticCommands(bot, update)
		handleDrillCommands(bot, update)
		handleGeneralCommands(bot, update)

	}
	if update.Message == nil {
		return
	}
	handleGeneralCommands2(bot, update)
	if update.Message.Text == "/start" {
		handleStart(bot, update)
	}

}

func ListenUpdates(bot *tgbotapi.BotAPI) {
	if err := loadProgress(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: %v", err)
	}

	offset := lastUpdatesID(bot)

	updateConfig := tgbotapi.NewUpdate(offset)
	updateConfig.Timeout = 30

	updates := bot.GetUpdatesChan(updateConfig)

	for update := range updates {
		handleUpdate(bot, update)
	}
}

func lastUpdatesID(bot *tgbotapi.BotAPI) int {
	updates, err := bot.GetUpdates(tgbotapi.UpdateConfig{
		Offset:  0,
		Limit:   1000,
		Timeout: 0,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
		return 0
	}
	if len(updates) > 0 {
		return updates[len(updates)-1].UpdateID + 1
	}
	return 0
}
